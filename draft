#!/bin/bash
#===============================================================================
#
#          FILE:  guessgame.sh
# 
#         USAGE:  ./guessgame.sh 
# 
#   DESCRIPTION:  This is a number guessing game. The user has 5 chances
#                 to guess a random number between 1 and 10.
# 
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:   (), 
#       COMPANY:  
#       VERSION:  1.0
#       CREATED:  03/06/2017 10:37:37 PM PST
#      REVISION:  ---
#===============================================================================

#Add wrong speed option

#Game introduction set to the variable setTitle
setTitle() {
echo -e Hello, this game checks your knowledge of the multiplication table.
}
setTitle -e

echo -n "Please choose your speed in seconds. Options: 4, 7, 10: " 
read speed

s=1
setStopwatch(){
while [[ s -gt 0 ]]
do
s="$((speed - (SECONDS - start)))"
echo -e "seconds left: $s"
sleep 0 
done
#trap 'echo "\nTOO SLOW. GAME OVER!!!"; exit' 0
exit 1 
}

let attempts=9
let counter=0
let wrong_attempts=0

echo "Let's start!"
start="$SECONDS"

while [[ $counter -le  $attempts ]] 
do

#generation of two random numbers, A and B
A=$((RANDOM%11))
B=$((RANDOM%11))
Z=A*B
echo -e "$A x $B = "

read input

setStopwatch > time_output.txt 2>&1 &

#if [[ "output=`tail -n 1 time_output.txt | cat`" -eq "TOO SLOW. GAME OVER!!!"
# ]]
#  then 
#  exit 0
#  fi
  if [[ input -eq Z ]]
  then 
  echo -e "\rThat is correct!"
  output=`tail -n 1 time_output.txt| cat`
  echo -e "$output"
  counter=$((counter+1))
   
  elif [[ input -ne Z ]] 
  then
             while [[ input -ne Z ]]
             do
             wrong_attempts=$((wrong_attempts+1))
                 if [[ wrong_attempts -gt 4 ]]
                    then
                    echo "Too many incorrect answers. 
                    Learn the damn multiplication table!"
                    exit 0                    
                 else
                 echo -e "Wrong answer. Try harder!"
                 output=`tail -n 1 time_output.txt| cat`
                 echo -e "$output"
                 echo $A x $B = 
                 read input
                 fi
             done
             wrong_attempts=0
             echo That is correct!
             output=`tail -n 1 time_output.txt| cat`
             echo -e "$output"
  fi 
counter=$((counter+1))
done
echo "Next level!"
